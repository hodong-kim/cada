# ./tests/Rakefile
require 'rake/clean'

# Variables
GNATMAKE = "gnatmake14"

# List of test executables
TEST_SOURCES   = FileList['test_*.adb']
TEST_BASENAMES = TEST_SOURCES.pathmap('%n')
DYNAMIC_EXECS  = TEST_BASENAMES.dup
STATIC_EXECS   = TEST_BASENAMES.map { |name| "#{name}-static" }
ALL_EXECS      = DYNAMIC_EXECS + STATIC_EXECS

# Library path
LIB_DIR     = "../src"
LIB_STATIC  = "#{LIB_DIR}/libcada.a"
LIB_SHARED  = "#{LIB_DIR}/libcada.so"
TEST_LIB_SO = "libexample.so"

# LDFLAGS
EXTRA_LDFLAGS = "-Wl,--start-group -lcada -Wl,--end-group"

# Default task: build all test executables
task :default => ALL_EXECS

# --- Build Rules ---
TEST_BASENAMES.each do |base|
  source = "#{base}.adb"

  # 1. Link to dynamic library
  dynamic_target = base
  file dynamic_target => [source, LIB_SHARED] do |t|
    puts "Building DYNAMICALLY linked: #{t.name}"
    linker_args = "-largs -L#{LIB_DIR} #{EXTRA_LDFLAGS} -Wl,-rpath,#{LIB_DIR}"
    sh "#{GNATMAKE} -I. -I#{LIB_DIR} #{t.source} -o #{t.name} #{linker_args}"
  end

  # 2. Link to static library
  static_target = "#{base}-static"
  dependencies = [source, LIB_STATIC]

  file static_target => dependencies do |t|
    puts "Building STATICALLY linked: #{t.name}"
    sh "#{GNATMAKE} -I. -I#{LIB_DIR} #{t.source} -o #{t.name} -largs #{LIB_STATIC} -Wl,-z,noexecstack"
  end
end

# --- Special dependency rule ---
file TEST_LIB_SO => 'libexample.c' do |t|
  sh "cc -fPIC -shared -o #{t.name} #{t.source}"
end

task :run_dynamic_tests => DYNAMIC_EXECS do
  Rake::Task[TEST_LIB_SO].invoke if Rake::Task.task_defined?(TEST_LIB_SO)
end

# --- Run and clean tasks ---
desc "Run all compiled tests (both static and dynamic)"
task :run => [:run_dynamic_tests] + STATIC_EXECS do
  puts "\n--- Running dynamically linked tests ---"
  DYNAMIC_EXECS.each { |exec| sh "./#{exec}" }

  puts "\n--- Running statically linked tests ---"
  STATIC_EXECS.each do |exec|
    if exec.include?('test_dl-static')
      sh "LD_LIBRARY_PATH=. ./#{exec}"
    else
      sh "./#{exec}"
    end
  end
end

task :test => :run

CLEAN.include('*.o', '*.ali', ALL_EXECS, TEST_LIB_SO, 'b~*', 'flock.lock', 'fcntl.lock')
